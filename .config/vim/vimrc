vim9script

# Load defaults
runtime defaults.vim

# Terminal codes {{{

# https://invisible-island.net/xterm/ctlseqs/ctlseqs.txt

# Cursor shape
&t_SI = "\<Esc>[6 q"
&t_SR = "\<Esc>[4 q"
&t_EI = "\<Esc>[2 q"

# Bracketed paste
&t_BE = "\<Esc>[?2004h"
&t_BD = "\<Esc>[?2004l"
&t_PS = "\<Esc>[200~"
&t_PE = "\<Esc>[201~"

# Underlines
# https://sw.kovidgoyal.net/kitty/underlines/
&t_AU = "\<Esc>[58;5;%dm"
&t_Ce = "\<Esc>[24m"
&t_Cs = "\<Esc>[4:3m"
&t_Us = "\<Esc>[4:2m"
&t_ds = "\<Esc>[4:4m"
&t_Ds = "\<Esc>[4:5m"

# Focus events
&t_fe = "\<Esc>[?1004h"
&t_fd = "\<Esc>[?1004l"
execute "set <FocusGained>=\<Esc>[I"
execute "set <FocusLost>=\<Esc>[O"

# }}}
# Global {{{

set belloff=all
set hidden
set splitright
set splitbelow
set nostartofline
set scrolloff=2
set nojoinspaces
set completeopt=menuone,noselect,noinsert,popuphidden,fuzzy

# Appearance
set background=dark
set termguicolors
set fillchars=vert:│
set listchars=eol:$,tab:»-,space:·
set lazyredraw

# Search
set ignorecase
set smartcase
set nohlsearch
set incsearch
set grepprg=rg\ --vimgrep

# Statusline
set laststatus=2
set statusline=%<%f\ %([%H%W%M%R]%)

# Cmdline
set showcmd
set showmode
set shortmess=aOTIc
set wildmenu
set wildoptions=fuzzy,pum,tagfile
set wildignorecase

# }}}
# Window {{{

set nowrap
set linebreak
set number
set signcolumn=number

# }}}
# Buffer {{{

set tabstop=4
set softtabstop=4
set shiftwidth=4
set smarttab
set noexpandtab
set complete=.,w
set undofile
if has("win32")
	set undodir=$TEMP
endif

# }}}
# Mappings {{{

# Use space for leader
g:mapleader = " "
nnoremap Y y$

# Vertical split for tag jump
nnoremap <silent> <C-W>] <Cmd>vert wincmd ]<CR>
nnoremap <silent> <C-W><C-]> <Cmd>vert wincmd ]<CR>

# Quickfix and loclist
nnoremap <silent> <Leader>lq <Cmd>cwindow<CR>
nnoremap <silent> <Leader>ll <Cmd>lwindow<CR>
nnoremap <silent> <C-W>z <Cmd>wincmd z<bar>cclose<bar>lclose<CR>
nnoremap <silent> <C-W>Q <Cmd>tabclose<CR>

# <C-W> mappings
nnoremap <C-S> <C-W>v
nnoremap <C-Q> <C-W>q
nnoremap <C-H> <C-W>h
nnoremap <C-J> <C-W>j
nnoremap <C-K> <C-W>k
nnoremap <C-L> <C-W>l
tnoremap <C-K> <C-W>k
tnoremap <C-E> <C-W>N

# }}}
# Commands {{{

# Make the current buffer a scratch buffer
command! Scratch set buftype=nofile | set bufhidden=hide | set noswapfile

# New terminal at the bottom
command! -nargs=* T new | wincmd J | set nonumber norelativenumber winfixheight | resize 15 | terminal ++curwin ++close <args>

augroup vimrc
	autocmd!
augroup END

# }}}
# Plugins {{{

packadd! matchit
packadd! comment

# vim-plug bootstrapping
if empty(glob(expand("$MYVIMDIR/autoload/plug.vim")))
	!curl -fLo $MYVIMDIR/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

plug#begin()

# General {{{

Plug "tpope/vim-surround"
Plug "tpope/vim-fugitive"
Plug "tpope/vim-repeat"
Plug "tpope/vim-unimpaired"
Plug "tpope/vim-abolish"

# }}}
# Gruvbox {{{

Plug "morhetz/gruvbox"
g:gruvbox_italic = 1

# }}}
# Clipboard {{{

Plug "ojroques/vim-oscyank"
g:oscyank_max_length = 128 * 1024  # 128 KB
g:oscyank_silent = 1
autocmd vimrc TextYankPost * {
if v:event.operator == "y" && v:event.regname == ""
    call OSCYankRegister(v:event.regname)
endif
}

# }}}
# FZF {{{

Plug "junegunn/fzf"
Plug "junegunn/fzf.vim"
g:fzf_preview_window = []
nnoremap <Leader>ff <Cmd>Files<CR>
nnoremap <Leader>fg <Cmd>GFiles<CR>
nnoremap <Leader>fb <Cmd>Buffers<CR>
nnoremap <Leader>f/ :Rg <C-R><C-W>

# }}}
# Dirvish {{{

Plug "justinmk/vim-dirvish"
g:dirvish_relative_paths = 1
g:dirvish_mode = ':sort ,^\v(.*[\/])|\ze,'

# }}}
# Zepl {{{

Plug "axvr/zepl.vim"
g:repl_config = {
	python: {
		cmd: "python",
		formatter: function("zepl#contrib#python#formatter")
	}
}
autocmd vimrc VimEnter * runtime zepl/contrib/python.vim
autocmd vimrc User ZeplTerminalWinOpen set nonumber norelativenumber | wincmd J | set winfixheight | resize 15

# }}}
# Filetype specific {{{

# React
Plug "maxmellon/vim-jsx-pretty"

# HTML
Plug "mattn/emmet-vim"
g:user_emmet_install_global = 0
autocmd vimrc FileType html,css,javascriptreact EmmetInstall

# CSV
Plug "chrisbra/csv.vim"
g:csv_bind_B = 1

# Jupyter notebooks
Plug "goerz/jupytext.vim"

# LaTeX
Plug "lervag/vimtex"
g:vimtex_view_method = "zathura_simple"

# }}}
# Vsnip {{{

Plug "hrsh7th/vim-vsnip"
Plug "hrsh7th/vim-vsnip-integ"
Plug "rafamadriz/friendly-snippets"

g:vsnip_snippet_dir = expand("$MYVIMDIR/vsnip")

# Snippet completion
def VsnipComplete(): string

	# Find prefix by searching back
	const line = getline('.')
	var start = col('.') - 1
	while start > 0 && line[start - 1] =~ '\S'
		start -= 1
	endwhile

	# Get snippets and filter using prefix
	final matches = vsnip#get_complete_items(bufnr("%"))
	const prefix = "^" .. line[start : col('.') - 2]
	matches->filter((idx, val) => val.word =~ prefix)

	complete(start + 1, matches)
	return ""

enddef

inoremap <C-X><C-A> <C-R>=<SID>VsnipComplete()<CR>

# Jump back and forth
inoremap <C-F> <Plug>(vsnip-jump-next)
snoremap <C-F> <Plug>(vsnip-jump-next)
inoremap <C-B> <Plug>(vsnip-jump-prev)
snoremap <C-B> <Plug>(vsnip-jump-prev)

# Fill $TM_SELECTED_TEXT
nnoremap s <Plug>(vsnip-cut-text)
nnoremap ss <Plug>(vsnip-cut-text)_
nnoremap S <Plug>(vsnip-cut-text)$
vnoremap s <Plug>(vsnip-cut-text)

# }}}
# LSP {{{

Plug "yegappan/lsp"

# Other options are set by vimcomplete
var lspOptions = {
	autoComplete: false,
	autoPopulateDiags: true,
	completionTextEdit: false,
	snippetSupport: true,
	vsnipSupport: true,
	usePopupInCodeAction: true,
}

def LSPInit()
	setlocal tagfunc=lsp#lsp#TagFunc
	nnoremap <buffer> g] <Cmd>LspPeekDefinition<CR>
	nnoremap <buffer> gd <Cmd>LspGotoDeclaration<CR>
	nnoremap <buffer> gD <Cmd>LspPeekDeclaration<CR>
	nnoremap <buffer> gy <Cmd>LspGotoTypeDef<CR>
	nnoremap <buffer> gY <Cmd>LspPeekTypeDef<CR>
	nnoremap <buffer> gl <Cmd>LspGotoImpl<CR>
	nnoremap <buffer> gL <Cmd>LspPeekImpl<CR>
	nnoremap <buffer> gb <Cmd>LspShowReferences<CR>
	nnoremap <buffer> gB <Cmd>LspPeekReferences<CR>
	nnoremap <buffer> K <Cmd>LspHover<CR>
	inoremap <buffer> <C-Q> <Cmd>LspShowSignature<CR>
	nnoremap <buffer> <Leader>lo <Cmd>LspOutline<CR>
	nnoremap <buffer> <Leader>ls <Cmd>LspDocumentSymbol<CR>
	nnoremap <buffer> <Leader>lS <Cmd>LspSymbolSearch<CR>
	nnoremap <buffer> <Leader>lr <Cmd>LspRename<CR>
	nnoremap <buffer> <Leader>la <Cmd>LspCodeAction<CR>
	nnoremap <buffer> <Leader>ld <Cmd>LspDiag show<CR>
	nnoremap <buffer> <Leader>lf <Cmd>LspFold<bar>set foldcolumn=0<CR>
	nnoremap <buffer> gqQ <Cmd>LspFormat<CR>
	setlocal formatexpr=lsp#lsp#FormatExpr()
enddef

import "./lsp_servers.vim"

autocmd vimrc User LspSetup {
	call LspOptionsSet(lspOptions)
	call LspAddServer(lsp_servers.lspServers)
}
autocmd vimrc User LspAttached LSPInit()

# }}}
# DAP {{{

Plug "puremourning/vimspector"

g:vimspector_enable_mappings = "HUMAN"

nnoremap <Leader><F12> <Plug>VimspectorUpFrame
nnoremap <Leader><F11> <Plug>VimspectorDownFrame

# }}}

plug#end()

# }}}

colorscheme gruvbox

runtime vimrc.local

# vim: foldmethod=marker
