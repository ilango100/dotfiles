vim9script

# Load defaults
runtime defaults.vim

# Terminal codes {{{

# https://wezfurlong.org/wezterm/escape-sequences.html
# https://sw.kovidgoyal.net/kitty/underlines/
# https://invisible-island.net/xterm/ctlseqs/ctlseqs.txt

# Underlines
set t_AU=[58;5;%dm
set t_Ce=[24m
set t_Cs=[4:3m
set t_Us=[4:2m
set t_ds=[4:4m
set t_Ds=[4:5m

# Cursor shape
set t_SI=[6\ q
set t_SR=[4\ q
set t_EI=[2\ q

# }}}
# Global {{{

set hidden
set splitright
set splitbelow
set fillchars=vert:â”‚
set nostartofline
set lazyredraw
set scrolloff=2
set nojoinspaces
set complete=.,w,t,i
set completeopt=menuone,noselect,noinsert,popuphidden

g:mapleader = " "
nnoremap Y y$
inoremap <C-Q> <C-K>

# Save session and quit
command Q mksession! | qall

# }}}
# Window {{{

set nowrap
set linebreak
set number
set signcolumn=number
set listchars=eol:$,tab:Â»-,space:Â·

# Vertical split for tag jump
nnoremap <silent> <C-W>] <Cmd>vert wincmd ]<CR>
nnoremap <silent> <C-W><C-]> <Cmd>vert wincmd ]<CR>

# Quickfix and loclist
nnoremap <silent> <Leader>q <Cmd>copen<CR>
nnoremap <silent> <Leader>l <Cmd>lopen<CR>
nnoremap <silent> <C-W>z <Cmd>wincmd z<bar>cclose<bar>lclose<CR>
nnoremap <silent> <C-W>Q <Cmd>tabclose<CR>

# <C-W> mappings
nnoremap <C-S> <C-W>v
nnoremap <C-Q> <C-W>q
nnoremap <C-H> <C-W>h
nnoremap <C-J> <C-W>j
nnoremap <C-K> <C-W>k
nnoremap <C-L> <C-W>l
tnoremap <C-H> <C-W>h
tnoremap <C-J> <C-W>j
tnoremap <C-K> <C-W>k
tnoremap <C-L> <C-W>l

# }}}
# Buffer {{{

set tabstop=4
set softtabstop=4
set shiftwidth=4
set smarttab
set noexpandtab

# Make the current buffer a scratch buffer
command Scratch set buftype=nofile | set bufhidden=hide | set noswapfile

# }}}
# Search {{{

set ignorecase
set smartcase
set nohlsearch
set incsearch
set grepprg=rg\ --vimgrep

# }}}
# Plugins {{{

packadd! matchit

# vim-plug bootstrapping
if empty(glob("~/.vim/autoload/plug.vim"))
	!curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

plug#begin()

# General {{{

Plug "tpope/vim-commentary"
Plug "tpope/vim-surround"
Plug "tpope/vim-fugitive"
Plug "tpope/vim-repeat"
Plug "tpope/vim-unimpaired"
Plug "tpope/vim-abolish"

# }}}
# Gruvbox {{{

Plug "morhetz/gruvbox"

# }}}
# Lightline {{{

Plug "itchyny/lightline.vim"

set laststatus=2
g:lightline = {
	colorscheme: "gruvbox",
	active: {
		left: [
			["mode", "paste"],
			["filename"],
			["readonly", "modified"],
		],
		right: [
			["lineinfo"],
			["filetype"],
			["lsp_warnings", "lsp_errors", "lsp_ok"],
		],
	},
	inactive: {
		left: [["filename", "modified"]],
		right: [["lineinfo"]],
	},
	tabline: {
		left: [["tabs"]],
		right: [["close"]]
	},
	component_expand: {
		lsp_warnings: "lightline_lsp#Warnings",
		lsp_errors: "lightline_lsp#Errors",
		lsp_ok: "lightline_lsp#OK"
	},
	component_type: {
		lsp_warnings: "warning",
		lsp_errors: "error",
		lsp_ok: "middle",
	}
}

# }}}
# Clipboard {{{

Plug "ojroques/vim-oscyank"
g:oscyank_max_length = 128 * 1024  # 128 KB
g:oscyank_silent = 1
autocmd TextYankPost * {
if v:event.operator == "y" && v:event.regname == ""
    call OSCYankRegister(v:event.regname)
endif
}

# }}}
# Fuzzyy {{{

Plug "Donaldttt/fuzzyy"
g:enable_fuzzyy_keymaps = 0
g:fuzzyy_window_layout = {
	"FuzzyFiles": { "preview": 0 },
	"FuzzyGitFiles": { "preview": 0 },
	"FuzzyBuffers": { "preview": 0 },
	"FuzzyGrep": { "preview": 0 },
}
nnoremap <Leader>ff <Cmd>FuzzyFiles<CR>
nnoremap <Leader>fg <Cmd>FuzzyGitFiles<CR>
nnoremap <Leader>fb <Cmd>FuzzyBuffers<CR>
nnoremap <Leader>f/ <Cmd>FuzzyInBuffer<CR>
nnoremap <Leader>f<C-]> :FuzzyGrep <C-R><C-W><CR>

# }}}
# Dirvish {{{

Plug "justinmk/vim-dirvish"
g:dirvish_relative_paths = 1
g:dirvish_mode = ':sort ,^\v(.*[\/])|\ze,'

# }}}
# Zepl {{{

Plug "axvr/zepl.vim"
g:repl_config = {
	python: {
		cmd: "python",
		formatter: function("zepl#contrib#python#formatter")
	}
}
autocmd! User ZeplTerminalWinOpen set nonumber norelativenumber | wincmd J | set winfixheight | resize 15

Plug "~/projects/xepl.vim"

nnoremap <Leader>z <Plug>XeplRun
nnoremap <Leader>zz <Plug>XeplRun_
vnoremap <leader>z <Plug>XeplRunV

# }}}
# Filetype specific {{{

Plug "mattn/emmet-vim"
g:user_emmet_install_global = 0
autocmd! FileType html,css EmmetInstall

Plug "chrisbra/csv.vim"
g:csv_bind_B = 1

Plug "goerz/jupytext.vim"

# }}}
# Vsnip {{{

Plug "hrsh7th/vim-vsnip"
Plug "hrsh7th/vim-vsnip-integ"
Plug "rafamadriz/friendly-snippets"

# Snippet completion
def VsnipComplete(): string

	# Find prefix by searching back
	const line = getline('.')
	var start = col('.') - 1
	while start > 0 && line[start - 1] =~ '\S'
		start -= 1
	endwhile

	# Get snippets and filter using prefix
	final matches = vsnip#get_complete_items(bufnr("%"))
	const prefix = "^" .. line[start : col('.') - 2]
	matches->filter((idx, val) => val.word =~ prefix)

	complete(start + 1, matches)
	return ""

enddef

inoremap <C-X><C-I> <C-R>=<SID>VsnipComplete()<CR>

# Jump back and forth
inoremap <C-F> <Plug>(vsnip-jump-next)
snoremap <C-F> <Plug>(vsnip-jump-next)
inoremap <C-B> <Plug>(vsnip-jump-prev)
snoremap <C-B> <Plug>(vsnip-jump-prev)

# Fill $TM_SELECTED_TEXT
nnoremap s <Plug>(vsnip-cut-text)
nnoremap ss <Plug>(vsnip-cut-text)_
nnoremap S <Plug>(vsnip-cut-text)$
vnoremap s <Plug>(vsnip-cut-text)

# }}}
# LSP {{{

Plug "yegappan/lsp"
Plug "ilango100/lightline-lsp"

# Other options are set by vimcomplete
var lspOptions = {
	autoComplete: false,
	completionTextEdit: false,
	omniComplete: false,
	showInlayHints: true,
	snippetSupport: true,
	vsnipSupport: true,
	usePopupInCodeAction: true,
}

def LSPInit()
	nnoremap <buffer> gy <Cmd>LspGotoTypeDef<CR>
	nnoremap <buffer> gY <Cmd>LspPeekTypeDef<CR>
	nnoremap <buffer> gd <Cmd>LspGotoDeclaration<CR>
	nnoremap <buffer> gD <Cmd>LspGotoDeclaration<CR>
	setlocal tagfunc=lsp#lsp#TagFunc
	nnoremap <buffer> g] <Cmd>LspPeekDefinition<CR>
	nnoremap <buffer> gi <Cmd>LspGotoImpl<CR>
	nnoremap <buffer> gI <Cmd>LspPeekImpl<CR>
	nnoremap <buffer> gr <Cmd>LspShowReferences<CR>
	nnoremap <buffer> gR <Cmd>LspPeekReferences<CR>
	nnoremap <buffer> K <Cmd>LspHover<CR>
	nnoremap <buffer> gs <Cmd>LspOutline<CR>
	nnoremap <buffer> gS <Cmd>LspSymbolSearch<CR>
	inoremap <buffer> <C-K> <Cmd>LspShowSignature<CR>
	nnoremap <buffer> <Leader>r <Cmd>LspRename<CR>
	nnoremap <buffer> <Leader>a <Cmd>LspCodeAction<CR>
	nnoremap <buffer> <Leader>d <Cmd>LspDiagShow<CR>
	nnoremap <buffer> gqQ <Cmd>LspFormat<CR>
	setlocal formatexpr=lsp#lsp#FormatExpr()
	setlocal completefunc=LspOmniFunc
enddef

import "./lsp_servers.vim"

augroup lsp_vimrc
	autocmd!
	autocmd VimEnter * {
		call LspOptionsSet(lspOptions)
		call LspAddServer(lsp_servers.lspServers)
	}
	autocmd User LspAttached LSPInit()
augroup END

# }}}
# DAP {{{

Plug "puremourning/vimspector", {"do": ":VimspectorInstall --enable-python"}

g:vimspector_enable_mappings = "HUMAN"

nnoremap <Leader><F12> <Plug>VimspectorUpFrame
nnoremap <Leader><F11> <Plug>VimspectorDownFrame

# }}}

plug#end()

# }}}
# Colorscheme {{{

set termguicolors
set background=dark
g:gruvbox_italic = 1
colorscheme gruvbox

# }}}
# Cmdline {{{

set showcmd
set noshowmode
set shortmess=aOTIc
set wildmenu
set wildoptions=fuzzy,pum,tagfile
set wildignorecase

# }}}
# Terminal {{{

set termwinsize=15x0
command -nargs=* T new | wincmd J | set winfixheight | terminal ++curwin ++close <args>
tnoremap <C-E> <C-W>N
tnoremap <C-L> <C-L>
autocmd! TerminalWinOpen * set nonumber norelativenumber

# Zepl
runtime zepl/contrib/python.vim

# }}}

runtime vimrc.local

# vim: foldmethod=marker
